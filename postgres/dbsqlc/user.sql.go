// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package dbsqlc

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
    id,
    username,
    name,
    password,
    email,
    age,
    gender,
    date_of_birth,
    created_at,
    updated_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    current_timestamp,
    current_timestamp
) RETURNING id, username, password, name, gender, email, age, date_of_birth, created_at, updated_at
`

type AddUserParams struct {
	ID          uuid.UUID
	Username    string
	Name        string
	Password    string
	Email       string
	Age         int32
	Gender      Gender
	DateOfBirth time.Time
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.ID,
		arg.Username,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.Age,
		arg.Gender,
		arg.DateOfBirth,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Gender,
		&i.Email,
		&i.Age,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, 
    username,
    name,
    email,
    age,
    gender,
    date_of_birth,
    created_at,
    updated_at 
from users where email = $1
`

type GetUserByEmailRow struct {
	ID          uuid.UUID
	Username    string
	Name        string
	Email       string
	Age         int32
	Gender      Gender
	DateOfBirth time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.Gender,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	fmt.Println(email)
	fmt.Println(err)
	fmt.Println(i)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, 
    username,
    name,
    email,
    age,
    gender,
    date_of_birth,
    created_at,
    updated_at 
from users where id = $1
`

type GetUserByIDRow struct {
	ID          uuid.UUID
	Username    string
	Name        string
	Email       string
	Age         int32
	Gender      Gender
	DateOfBirth time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.Gender,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, 
    username,
    name,
    email,
    age,
    gender,
    date_of_birth,
    created_at,
    updated_at 
from users
`

type GetUsersRow struct {
	ID          uuid.UUID
	Username    string
	Name        string
	Email       string
	Age         int32
	Gender      Gender
	DateOfBirth time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Email,
			&i.Age,
			&i.Gender,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
